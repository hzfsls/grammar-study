
# ss = [
# """
# def productOfDivisible(nums: collection.Seq[Int], m: Int): Int = {
#   var result = 1
#   for (num <- nums) {
#     if (num % m == 0) {
#       result *= num
#     }
#   }
#   result
# }
# ""","""
# def genRotations(s: String): collection.Seq[String] = {
#   val result = collection.mutable.ArrayBuffer[String]()
#   for (i <- 1 until s.length) {
#     result += s.substring(i) + s.substring(0, i)
#   }
#   result
# }

# def sumOfRotations(s: String): Int = {
#   var result = 0
#   for (r <- genRotations(s)) {
#     result += r.toInt
#   }
#   result
# }
# ""","""
# def productOfDivisible(nums: collection.Seq[Int], m: Int): Int = {
#   nums.filter(_ % m == 0).product
# }
# ""","""
# def genRotations(s: String): collection.Seq[String] = {
#   (1 until s.length).map(i => s.substring(i) + s.substring(0, i))
# }

# def sumOfRotations(s: String): Int = {
#   genRotations(s).map(_.toInt).sum
# }
# """]

# import json

# for s in ss:
#     print(json.dumps(s.strip()))

solutions =  {
    "HumanEval/0": "func HasCloseElements(numbers []float64, threshold float64) bool {\n    for i := 0; i < len(numbers); i++ {\n        for j := i + 1; j < len(numbers); j++ {\n            if math.Abs(numbers[i]-numbers[j]) < threshold {\n                return true\n            }\n        }\n    }\n    return false\n}",
    "HumanEval/1": "func SeparateParenGroups(parenString string) []string {\n    groups := []string{}\n    stk := []rune{}\n    currentGroup := \"\"\n    parens := strings.ReplaceAll(parenString, \" \", \"\")\n    for _, ch := range parens {\n        if ch == '(' {\n            stk = append(stk, ch)\n            currentGroup += string(ch)\n        } else if ch == ')' {\n            stk = stk[:len(stk)-1]\n            currentGroup += string(ch)\n            if len(stk) == 0 {\n                groups = append(groups, currentGroup)\n                currentGroup = \"\"\n            }\n        }\n    }\n    return groups\n}",
    "HumanEval/2": "func TruncateNumber(num float64) float64 {\n    return num - math.Floor(num)\n}",
    "HumanEval/3": "func BelowZero(operations []int) bool {\n    balance := 0\n    for _, op := range operations {\n        balance += op\n        if balance < 0 {\n            return true\n        }\n    }\n    return false\n}",
    "HumanEval/4": "func MeanAbsoluteDeviation(numbers []float64) float64 {\n    mean := 0.0\n    for _, num := range numbers {\n        mean += num\n    }\n    mean /= float64(len(numbers))\n    deviation := 0.0\n    for _, num := range numbers {\n        deviation += math.Abs(num - mean)\n    }\n    return deviation / float64(len(numbers))\n}",
    "HumanEval/5": "func Intersperse(numbers []int, delimiter int) []int {\n    result := []int{}\n    for i := 0; i < len(numbers); i++ {\n        if i != 0 {\n            result = append(result, delimiter)\n        }\n        result = append(result, numbers[i])\n    }\n    return result\n}",
    "HumanEval/6": "func ParseNestedParens(parenString string) []int {\n    result := []int{}\n    parenGroups := []string{}\n    for _, str := range strings.Split(parenString, \" \") {\n        if str != \"\" {\n            parenGroups = append(parenGroups, str)\n        }\n    }\n    for _, group := range parenGroups {\n        maxDepth := 0\n        depth := 0\n        for _, ch := range group {\n            if ch == '(' {\n                depth++\n                maxDepth = max(maxDepth, depth)\n            } else if ch == ')' {\n                depth--\n            }\n        }\n        result = append(result, maxDepth)\n    }\n    return result\n}",
    "HumanEval/7": "func FilterBySubstring(strs []string, substring string) []string {\n    result := []string{}\n    for _, s := range strs {\n        if strings.Contains(s, substring) {\n            result = append(result, s)\n        }\n    }\n    return result\n}",
    "HumanEval/8": "func SumProduct(numbers []int) []int {\n    nSum := 0\n    nProduct := 1\n    for _, n := range numbers {\n        nSum += n\n        nProduct *= n\n    }\n    return []int{nSum, nProduct}\n}",
    "HumanEval/9": "func RollingMax(numbers []int) []int {\n    maxSoFar := math.MinInt\n    result := []int{}\n    for _, num := range numbers {\n        maxSoFar = max(maxSoFar, num)\n        result = append(result, maxSoFar)\n    }\n    return result\n}",
    "HumanEval/10": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc MakePalindrome(s string) string {\n    if IsPalindrome(s) {\n        return s\n    }\n    for i := 0; i < len(s); i++ {\n        if IsPalindrome(s[i:]) {\n            runes := []rune(s[:i])\n            for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n                runes[i], runes[j] = runes[j], runes[i]\n            }\n            return s + string(runes)\n        }\n    }\n    return \"\"\n}",
    "HumanEval/11": "func StringXor(a string, b string) string {\n    result := []string{}\n    for i := 0; i < len(a); i++ {\n        if a[i] == b[i] {\n            result = append(result, \"0\")\n        } else {\n            result = append(result, \"1\")\n        }\n    }\n    return strings.Join(result, \"\")\n}",
    "HumanEval/12": "func Longest(strs []string) *string {\n    if len(strs) == 0 {\n        return nil\n    }\n    longestS := strs[0]\n    for _, s := range strs {\n        if len(s) > len(longestS) {\n            longestS = s\n        }\n    }\n    return &longestS\n}",
    "HumanEval/13": "func GreatestCommonDivisor(a int, b int) int {\n    if b == 0 {\n        return a\n    } else {\n        return GreatestCommonDivisor(b, a%b)\n    }\n}",
    "HumanEval/14": "func AllPrefixes(s string) []string {\n    prefixes := []string{}\n    for i := 0; i < len(s); i++ {\n        prefixes = append(prefixes, s[:i+1])\n    }\n    return prefixes\n}",
    "HumanEval/15": "func StringSequence(n int) string {\n    result := []string{}\n    for i := 0; i <= n; i++ {\n        result = append(result, strconv.Itoa(i))\n    }\n    return strings.Join(result, \" \")\n}",
    "HumanEval/16": "func CountDistinctCharacters(s string) int {\n    dc := make(map[rune]bool)\n    for _, ch := range strings.ToLower(s) {\n        dc[ch] = true\n    }\n    return len(dc)\n}",
    "HumanEval/17": "func ParseMusic(musicString string) []int {\n    durations := map[string]int{\n        \"o\": 4,\n        \"o|\": 2,\n        \".|\": 1,\n    }\n    notes := []string{}\n    for _, str := range strings.Split(musicString, \" \") {\n        if str != \"\" {\n            notes = append(notes, str)\n        }\n    }\n    result := []int{}\n    for _, note := range notes {\n        result = append(result, durations[note])\n    }\n    return result\n}",
    "HumanEval/18": "func HowManyTimes(s string, substring string) int {\n    times := 0\n    for i := 0; i <= len(s) - len(substring); i++ {\n        if s[i:i+len(substring)] == substring {\n            times += 1\n        }\n    }\n    return times\n}",
    "HumanEval/19": "func SortNumbers(numbers string) string {\n    numDict := map[string]int{\n        \"zero\": 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"nine\": 9,\n    }\n    strs := strings.Split(numbers, \" \")\n    numList := []string{}\n    for _, str := range strs {\n        numList = append(numList, str)\n    }\n    sort.Slice(numList, func(i, j int) bool {\n        return numDict[numList[i]] < numDict[numList[j]]\n    })\n    return strings.Join(numList, \" \")\n}",
    "HumanEval/20": "func FindClosestElements(numbers []float64) []float64 {\n    sortedNumbers := make([]float64, len(numbers))\n    copy(sortedNumbers, numbers)\n    sort.Float64s(sortedNumbers)\n    minDiff := math.Inf(1)\n    closestPair := []float64{}\n    for i := 1; i < len(sortedNumbers); i++ {\n        diff := sortedNumbers[i] - sortedNumbers[i - 1]\n        if diff < minDiff {\n            minDiff = diff\n            closestPair = []float64{sortedNumbers[i - 1], sortedNumbers[i]}\n        }\n    }\n    return closestPair\n}",
    "HumanEval/21": "func RescaleToUnit(numbers []float64) []float64 {\n    minNum := math.Inf(1)\n    maxNum := math.Inf(-1)\n    for _, num := range numbers {\n        if num < minNum {\n            minNum = num\n        }\n        if num > maxNum {\n            maxNum = num\n        }\n    }\n    res := make([]float64, len(numbers))\n    if minNum == maxNum {\n        return res\n    } else {\n        for i, num := range numbers {\n            res[i] = (num - minNum) / (maxNum - minNum)\n        }\n        return res\n    }\n}",
    "HumanEval/22": "func FilterIntegers(values []interface{}) []int {\n    integers := []int{}\n    for _, value := range values {\n        if intValue, ok := value.(int); ok {\n            integers = append(integers, intValue)\n        }\n    }\n    return integers\n}",
    "HumanEval/23": "func StrLength(s string) int {\n    return len(s)\n}",
    "HumanEval/24": "func LargestDivisor(n int) int {\n    for i := 2; i < n; i++ {\n        if n % i == 0 {\n            return n / i\n        }\n    }\n    return 1\n}",
    "HumanEval/25": "func Factorize(n int) []int {\n    factors := []int{}\n    divisor := 2\n    for divisor <= n {\n        if n%divisor == 0 {\n            factors = append(factors, divisor)\n            n /= divisor\n        } else {\n            divisor++\n        }\n    }\n    return factors\n}",
    "HumanEval/26": "func RemoveDuplicates(numbers []int) []int {\n    counts := make(map[int]int)\n    for _, num := range numbers {\n        counts[num]++\n    }\n    res := make([]int, 0)\n    for _, num := range numbers {\n        if counts[num] == 1 {\n            res = append(res, num)\n        }\n    }\n    return res\n}",
    "HumanEval/27": "func FlipCase(s string) string {\n    var flipped strings.Builder\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            flipped.WriteRune(ch)\n        } else if unicode.IsLower(ch) {\n            flipped.WriteRune(unicode.ToUpper(ch))\n        } else if unicode.IsUpper(ch) {\n            flipped.WriteRune(unicode.ToLower(ch))\n        }\n    }\n    return flipped.String()\n}",
    "HumanEval/28": "func Concatenate(strs []string) string {\n    return strings.Join(strs, \"\")\n}",
    "HumanEval/29": "func FilterByPrefix(strs []string, prefixStr string) []string {\n    filtered := []string{}\n    for _, str := range strs {\n        if strings.HasPrefix(str, prefixStr) {\n            filtered = append(filtered, str)\n        }\n    }\n    return filtered\n}",
    "HumanEval/30": "func GetPositive(l []int) []int {\n    result := []int{}\n    for _, num := range l {\n        if num > 0 {\n            result = append(result, num)\n        }\n    }\n    return result\n}",
    "HumanEval/31": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}",
    "HumanEval/32": "func Poly(xs []int, x float64) float64 {\n    res := 0.0\n    for i := 0; i < len(xs); i++ {\n        res += float64(xs[i]) * math.Pow(x, float64(i))\n    }\n    return res\n}\nfunc FindZero(xs []int) float64 {\n    x1, x2 := 1.0, -1.0\n    for Poly(xs, x1) * Poly(xs, x2) > 0 {\n        x1 *= 2\n        x2 *= 2\n    }\n    for math.Abs(x1 - x2) > 1e-10 {\n        mid := (x1 + x2) / 2\n        if Poly(xs, mid) == 0 {\n            return mid\n        } else if Poly(xs, mid) * Poly(xs, x1) < 0 {\n            x2 = mid\n        } else {\n            x1 = mid\n        }\n    }\n    return (x1 + x2) / 2\n}",
    "HumanEval/33": "func SortThird(l []int) []int {\n    sortedThird := make([]int, 0)\n    for i, x := range l {\n        if i % 3 == 0 {\n            sortedThird = append(sortedThird, x)\n        }\n    }\n    result := make([]int, len(l))\n    sort.Ints(sortedThird)\n    for i, x := range l {\n        if i % 3 == 0 {\n            result[i] = sortedThird[i / 3]\n        } else {\n            result[i] = x\n        }\n    }\n    return result\n}",
    "HumanEval/34": "func ListUnique(l []int) []int {\n    keys := make(map[int]bool)\n    result := make([]int, 0)\n    for _, x := range l {\n        if _, value := keys[x]; !value {\n            keys[x] = true\n            result = append(result, x)\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
    "HumanEval/35": "func MaxElement(l []int) int {\n    if len(l) == 0 {\n        return 0\n    }\n    max := l[0]\n    for _, e := range l {\n        if e > max {\n            max = e\n        }\n    }\n    return max\n}",
    "HumanEval/36": "func FizzBuzz(n int) int {\n    cnt := 0\n    for i := 0; i < n; i++ {\n        if i%11 == 0 || i%13 == 0 {\n            cnt += strings.Count(strconv.Itoa(i), \"7\")\n        }\n    }\n    return cnt\n}",
    "HumanEval/37": "func SortEven(l []int) []int {\n    sortedEven := make([]int, 0)\n    for i, x := range l {\n        if i % 2 == 0 {\n            sortedEven = append(sortedEven, x)\n        }\n    }\n    result := make([]int, len(l))\n    sort.Ints(sortedEven)\n    for i, x := range l {\n        if i % 2 == 0 {\n            result[i] = sortedEven[i / 2]\n        } else {\n            result[i] = x\n        }\n    }\n    return result\n}",
    "HumanEval/38": "func EncodeCyclic(s string) string {\n    var result strings.Builder\n    for i := 0; i < len(s); i += 3 {\n        if i + 3 > len(s) {\n            result.WriteString(s[i:])\n        } else {\n            result.WriteString(s[i+1:i+3])\n            result.WriteByte(s[i])\n        }\n    }\n    return result.String()\n}\nfunc DecodeCyclic(s string) string {\n    return EncodeCyclic(EncodeCyclic(s))\n}",
    "HumanEval/39": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc PrimeFib(n int) int {\n    f := [2]int{0, 1}\n    cnt := 0\n    for cnt < n {\n        f = [2]int{f[1], f[0] + f[1]}\n        if IsPrime(f[1]) {\n            cnt++\n        }\n    }\n    return f[1]\n}",
    "HumanEval/40": "func TriplesSumToZero(l []int) bool {\n    for i := 0; i < len(l); i++ {\n        for j := i + 1; j < len(l); j++ {\n            for k := j + 1; k < len(l); k++ {\n                if l[i] + l[j] + l[k] == 0 {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
    "HumanEval/41": "func CarRaceCollision(n int) int {\n    return int(math.Pow(float64(n), float64(2)))\n}",
    "HumanEval/42": "func IncrList(l []int) []int {\n    result := make([]int, len(l))\n    for i := 0; i < len(l); i++ {\n        result[i] = l[i] + 1\n    }\n    return result\n}",
    "HumanEval/43": "func PairsSumToZero(l []int) bool {\n    seen := make(map[int]bool)\n    for _, num := range l {\n        if seen[-num] {\n            return true\n        }\n        seen[num] = true\n    }\n    return false\n}",
    "HumanEval/44": "func ChangeBase(x int, bas int) string {\n    if x == 0 {\n        return \"0\"\n    }\n    digits := []string{}\n    for x > 0 {\n        digits = append([]string{strconv.Itoa(x%bas)}, digits...)\n        x /= bas\n    }\n    return strings.Join(digits, \"\")\n}",
    "HumanEval/45": "func TriangleArea(a int, h int) float64 {\n    return float64(a * h) / 2\n}",
    "HumanEval/46": "func Fib4(n int) int {\n    fib := [4]int{0, 0, 2, 0}\n    for i := 4; i <= n; i++ {\n        fib[i % 4] = fib[0] + fib[1] + fib[2] + fib[3]\n    }\n    return fib[n % 4]\n}",
    "HumanEval/47": "func Median(l []float64) float64 {\n    sl := make([]float64, len(l))\n    copy(sl, l)\n    sort.Float64s(sl)\n    if len(l) % 2 != 0 {\n        return sl[len(l) / 2]\n    } else {\n        return (sl[len(l) / 2] + sl[len(l) / 2 - 1]) / 2\n    }\n}",
    "HumanEval/48": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}",
    "HumanEval/49": "func Modp(n int, p int) int {\n    ret := 1\n    for i := 0; i < n; i++ {\n        ret = (ret * 2) % p\n    }\n    return ret\n}",
    "HumanEval/50": "func EncodeShift(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        result = append(result, (ch - 97 + 5) % 26 + 97)\n    }\n    return string(result)\n}\nfunc DecodeShift(s string) string {\n    result := []rune{}\n    for _, ch := range s {\n        result = append(result, (ch - 97 + 21) % 26 + 97)\n    }\n    return string(result)\n}",
    "HumanEval/51": "func RemoveVowels(txt string) string {\n    vowels := \"aeiouAEIOU\"\n    var result strings.Builder\n    for _, char := range txt {\n        if !strings.ContainsRune(vowels, char) {\n            result.WriteRune(char)\n        }\n    }\n    return result.String()\n}",
    "HumanEval/52": "func BelowThreshold(l []int, t int) bool {\n    for _, x := range l {\n        if x >= t {\n            return false\n        }\n    }\n    return true\n}",
    "HumanEval/53": "func Add(x int, y int) int {\n    return x + y\n}",
    "HumanEval/54": "func SameChars(s0 string, s1 string) bool {\n    set0 := make(map[rune]bool)\n    set1 := make(map[rune]bool)\n    for _, char := range s0 {\n        set0[char] = true\n    }\n    for _, char := range s1 {\n        set1[char] = true\n    }\n    return reflect.DeepEqual(set0, set1)\n}",
    "HumanEval/55": "func Fib(n int) int {\n    if n <= 1 {\n        return n\n    } else {\n        return Fib(n-1) + Fib(n-2)\n    }\n}",
    "HumanEval/56": "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '<' {\n            depth += 1\n        } else if b == '>' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}",
    "HumanEval/57": "func Monotonic(l []int) bool {\n    diff := make([]int, len(l) - 1)\n    for i := 0; i < len(l) - 1; i++ {\n        diff[i] = l[i + 1] - l[i]\n    }\n    allNeg := true\n    allPos := true\n    for _, x := range diff {\n        if x > 0 {\n            allNeg = false\n        }\n        if x < 0 {\n            allPos = false\n        }\n    }\n    return allNeg || allPos\n}",
    "HumanEval/58": "func Common(l1 []int, l2 []int) []int {\n    result := make([]int, 0)\n    s1 := make(map[int]bool)\n    for _, num := range l1 {\n        s1[num] = true\n    }\n    for _, num := range l2 {\n        if s1[num] {\n            result = append(result, num)\n            s1[num] = false\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
    "HumanEval/59": "func LargestPrimeFactor(n int) int {\n    i := 2\n    for i*i <= n {\n        if n%i != 0 {\n            i++\n        } else {\n            n /= i\n        }\n    }\n    return n\n}",
    "HumanEval/60": "func SumToN(n int) int {\n    sum := 0\n    for i := 0; i <= n; i++ {\n        sum += i\n    }\n    return sum\n}",
    "HumanEval/61": "func CorrectBracketing(brackets string) bool {\n    depth := 0\n    for _, b := range brackets {\n        if b == '(' {\n            depth += 1\n        } else if b == ')' {\n            depth -= 1\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}",
    "HumanEval/62": "func Derivative(xs []int) []int {\n    result := make([]int, len(xs) - 1)\n    for i := 1; i < len(xs); i++ {\n        result[i - 1] = xs[i] * i\n    }\n    return result\n}",
    "HumanEval/63": "func Fibfib(n int) int {\n    if n <= 1 {\n        return 0\n    }\n    a, b, c := 0, 0, 1\n    for n > 2 {\n        a, b, c = b, c, a + b + c\n        n -= 1\n    }\n    return c\n}",
    "HumanEval/64": "func VowelsCount(s string) int {\n    vowels := \"aeiou\"\n    cnt := 0\n    for i := 0; i < len(s); i++ {\n        if strings.Contains(vowels, strings.ToLower(string(s[i]))) || (i == len(s) - 1 && strings.ToLower(string(s[i])) == \"y\") {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
    "HumanEval/65": "func CircularShift(x int, shift int) string {\n    xStr := strconv.Itoa(x)\n    if shift > len(xStr) {\n        runes := []rune(xStr)\n        for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n        return string(runes)\n    } else {\n        return xStr[len(xStr) - shift:] + xStr[:len(xStr) - shift]\n    }\n}",
    "HumanEval/66": "func DigitSum(s string) int {\n    a := 0\n    for _, c := range s {\n        if unicode.IsUpper(c) {\n            a += int(c)\n        }\n    }\n    return a\n}",
    "HumanEval/67": "func FruitDistribution(s string, n int) int {\n    words := strings.Split(s, \" \")\n    apples := 0\n    oranges := 0\n    for i, word := range words {\n        if word == \"apples\" {\n            apples, _ = strconv.Atoi(words[i - 1])\n        }\n        if word == \"oranges\" {\n            oranges, _ = strconv.Atoi(words[i - 1])\n        }\n    }\n    return n - apples - oranges\n}",
    "HumanEval/68": "func Pluck(arr []int) []int {\n    minEven := math.MaxInt\n    minIdx := -1\n    for i, n := range arr {\n        if n % 2 == 0 && n < minEven {\n            minEven = n\n            minIdx = i\n        }\n    }\n    if minIdx == -1 {\n        return []int{}\n    }\n    return []int{minEven, minIdx}\n}",
    "HumanEval/69": "func Search(lst []int) int {\n    freqs := make(map[int]int)\n    for _, n := range lst {\n        freqs[n] = freqs[n] + 1\n    }\n    maxVal := math.MinInt\n    for k, v := range freqs {\n        if v >= k && k > maxVal {\n            maxVal = k\n        }\n    }\n    if maxVal == math.MinInt {\n        return -1\n    }\n    return maxVal\n}",
    "HumanEval/70": "func StrangeSortList(lst []int) []int {\n    sl := make([]int, len(lst))\n    copy(sl, lst)\n    sort.Ints(sl)\n    result := make([]int, 0)\n    left, right := 0, len(sl) - 1\n    for left <= right {\n        result = append(result, sl[left])\n        left += 1\n        if left <= right {\n            result = append(result, sl[right])\n            right -= 1\n        }\n    }\n    return result\n}",
    "HumanEval/71": "func TriangleArea(a, b, c int) float64 {\n    if a + b > c && a + c > b && b + c > a {\n        s := float64(a + b + c) / 2.0\n        return math.Sqrt(float64(s * (s - float64(a)) * (s - float64(b)) * (s - float64(c))))\n    } else {\n        return -1.0\n    }\n}",
    "HumanEval/72": "func WillItFly(q []int, w int) bool {\n    if len(q) == 0 {\n        return false\n    }\n    isPalin := true\n    for i := 0; i < len(q); i++ {\n        if q[i] != q[len(q) - i - 1] {\n            isPalin = false\n            break\n        }\n    }\n    total := 0\n    for i := 0; i < len(q); i++ {\n        total += q[i]\n    }\n    return isPalin && total <= w\n}",
    "HumanEval/73": "func SmallestChange(arr []int) int {\n    ans := 0\n    for i := 0; i < len(arr) / 2; i++ {\n        if arr[i] != arr[len(arr) - i - 1] {\n            ans += 1\n        }\n    }\n    return ans\n}",
    "HumanEval/74": "func TotalMatch(lst1 []string, lst2 []string) []string {\n    cnt1 := 0\n    for _, b := range lst1 {\n        cnt1 += len(b)\n    }\n    cnt2 := 0\n    for _, b := range lst2 {\n        cnt2 += len(b)\n    }\n    if cnt1 <= cnt2 {\n        return lst1\n    } else {\n        return lst2\n    }\n}",
    "HumanEval/75": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc IsMultiplyPrime(a int) bool {\n    cnt := 0\n    for i := 2; i <= a; i++ {\n        if IsPrime(i) {\n            for a % i == 0 {\n                cnt += 1\n                a /= i\n            }\n        }\n    }\n    return cnt == 3\n}",
    "HumanEval/76": "func IsSimplePower(x int, n int) bool {\n    if n < 2 {\n        return x == n\n    }\n    tmp := 1\n    for tmp < x {\n        tmp *= n\n    }\n    return tmp == x\n}",
    "HumanEval/77": "func IsCube(a int) bool {\n    a = int(math.Abs(float64(a)))\n    root := int(math.Round(math.Pow(float64(a), 1.0 / 3.0)))\n    return root * root * root == a\n}",
    "HumanEval/78": "func HexKey(num string) int {\n    result := 0\n    for _, x := range num {\n        if strings.ContainsRune(\"2357BD\", x) {\n            result += 1\n        }\n    }\n    return result\n}",
    "HumanEval/79": "func DecimalToBinary(dec int) string {\n    binary := strconv.FormatInt(int64(dec), 2)\n    return fmt.Sprintf(\"db%sdb\", binary)\n}",
    "HumanEval/80": "func IsHappy(s string) bool {\n    if len(s) < 3 {\n        return false\n    }\n    for i := 0; i < len(s)-2; i++ {\n        if s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2] {\n            return false\n        }\n    }\n    return true\n}",
    "HumanEval/81": "func NumericalLetterGrade(grades []float64) []string {\n    result := []string{}\n    for _, g := range grades {\n        switch {\n            case g == 4.0:\n                result = append(result, \"A+\")\n            case g > 3.7:\n                result = append(result, \"A\")\n            case g > 3.3:\n                result = append(result, \"A-\")\n            case g > 3.0:\n                result = append(result, \"B+\")\n            case g > 2.7:\n                result = append(result, \"B\")\n            case g > 2.3:\n                result = append(result, \"B-\")\n            case g > 2.0:\n                result = append(result, \"C+\")\n            case g > 1.7:\n                result = append(result, \"C\")\n            case g > 1.3:\n                result = append(result, \"C-\")\n            case g > 1.0:\n                result = append(result, \"D+\")\n            case g > 0.7:\n                result = append(result, \"D\")\n            case g > 0.0:\n                result = append(result, \"D-\")\n            default:\n                result = append(result, \"E\")\n        }\n    }\n    return result\n}",
    "HumanEval/82": "func PrimeLength(s string) bool {\n    length := len(s)\n    if length < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(length)))); i++ {\n        if length % i == 0 {\n            return false\n        }\n    }\n    return true\n}",
    "HumanEval/83": "func StartsOneEnds(n int) int {\n    if n == 1 {\n        return 1\n    }\n    return 2 * 9 * int(math.Pow10(n-2))\n}",
    "HumanEval/84": "func Solve(n int) string {\n    digitsSum := 0\n    for _, d := range strconv.Itoa(n) {\n        digit, _ := strconv.Atoi(string(d))\n        digitsSum += digit\n    }\n    return strconv.FormatInt(int64(digitsSum), 2)\n}",
    "HumanEval/85": "func Add(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i % 2 == 1 && x % 2 == 0 {\n            result += x\n        }\n    }\n    return result\n}",
    "HumanEval/86": "func AntiShuffle(s string) string {\n    words := strings.Split(s, \" \")\n    for i, word := range words {\n        chars := []rune(word)\n        sort.Slice(chars, func(i, j int) bool {\n            return chars[i] < chars[j]\n        })\n        words[i] = string(chars)\n    }\n    return strings.Join(words, \" \")\n}",
    "HumanEval/87": "func GetRow(lst [][]int, x int) [][]int {\n    coords := [][]int{}\n    for i := 0; i < len(lst); i++ {\n        for j := 0; j < len(lst[i]); j++ {\n            if lst[i][j] == x {\n                coords = append(coords, []int{i, j})\n            }\n        }\n    }\n    sort.Slice(coords, func(i, j int) bool {\n        if coords[i][0] == coords[j][0] {\n            return coords[i][1] > coords[j][1]\n        }\n        return coords[i][0] < coords[j][0]\n    })\n    return coords\n}",
    "HumanEval/88": "func SortArray(arr []int) []int {\n    if len(arr) == 0 {\n        return []int{}\n    }\n    result := make([]int, len(arr))\n    copy(result, arr)\n    if (arr[0] + arr[len(arr) - 1]) % 2 == 0 {\n        sort.Sort(sort.Reverse(sort.IntSlice(result)))\n    } else {\n        sort.Ints(result)\n    }\n    return result\n}",
    "HumanEval/89": "func Encrypt(s string) string {\n    var result strings.Builder\n    for _, ch := range s {\n        shifted := ch + 4\n        if shifted > 'z' {\n            shifted -= 26\n        }\n        result.WriteRune(shifted)\n    }\n    return result.String()\n}",
    "HumanEval/90": "func NextSmallest(lst []int) *int {\n    tmp := make([]int, len(lst))\n    copy(tmp, lst)\n    sort.Ints(tmp)\n    sl := []int{}\n    for i := 0; i < len(tmp); i++ {\n        if i == 0 || tmp[i] != tmp[i - 1] {\n            sl = append(sl, tmp[i])\n        }\n    }\n    if len(sl) < 2 {\n        return nil\n    }\n    return &sl[1]\n}",
    "HumanEval/91": "func IsBored(s string) int {\n    sentences := regexp.MustCompile(`[.!?]\\s*`).Split(s, -1)\n    cnt := 0\n    for _, sentence := range sentences {\n        if len(sentence) >= 2 && sentence[:2] == \"I \" {\n            cnt++\n        }\n    }\n    return cnt\n}",
    "HumanEval/92": "func AnyInt(x interface{}, y interface{}, z interface{}) bool {\n    if intX, ok := x.(int); ok {\n        if intY, ok := y.(int); ok {\n            if intZ, ok := z.(int); ok {\n                if (intX+intY == intZ) || (intX+intZ == intY) || (intY+intZ == intX) {\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}",
    "HumanEval/93": "func Encode(message string) string {\n    vowels := \"aeiouAEIOU\"\n    var result strings.Builder\n    for _, ch := range message {\n        if unicode.IsLetter(ch) {\n            var ch1 rune\n            if unicode.IsLower(ch) {\n                ch1 = unicode.ToUpper(ch)\n            } else {\n                ch1 = unicode.ToLower(ch)\n            }\n            if strings.ContainsRune(vowels, ch1) {\n                ch1 = rune(int(ch1) + 2)\n            }\n            result.WriteRune(ch1)\n        } else {\n            result.WriteRune(ch)\n        }\n    }\n    return result.String()\n}",
    "HumanEval/94": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Skjkasdkd(lst []int) int {\n    maxPrime := 0\n    for _, n := range lst {\n        if IsPrime(n) && n > maxPrime {\n            maxPrime = n\n        }\n    }\n    if maxPrime == 0 {\n        return 0\n    }\n    largest := strconv.Itoa(maxPrime)\n    result := 0\n    for _, d := range largest {\n        result += int(d - '0')\n    }\n    return result\n}",
    "HumanEval/95": "func CheckDictCase(d map[string]string) bool {\n    if len(d) == 0 {\n        return false\n    }\n    lower, upper := true, true\n    for k, _ := range d {\n        for _, r := range k {\n            if !unicode.IsLower(r) {\n                lower = false\n            }\n            if !unicode.IsUpper(r) {\n                upper = false\n            }\n        }\n    }\n    return lower || upper\n}",
    "HumanEval/96": "func CountUpTo(n int) []int {\n    primes := make([]int, 0)\n    for num := 2; num < n; num++ {\n        flag := true\n        for _, p := range primes {\n            if num % p == 0 {\n                flag = false\n                break\n            }\n        }\n        if flag {\n            primes = append(primes, num)\n        }\n    }\n    return primes\n}",
    "HumanEval/97": "func Multiply(a int, b int) int {\n    return (int(math.Abs(float64(a))) % 10) * (int(math.Abs(float64(b))) % 10)\n}",
    "HumanEval/98": "func CountUpper(s string) int {\n    vowels := \"AEIOU\"\n    count := 0\n    for i, c := range s {\n        if i % 2 == 0 && strings.Contains(vowels, string(c)) {\n            count++\n        }\n    }\n    return count\n}",
    "HumanEval/99": "func ClosestInteger(value string) int {\n    num, _ := strconv.ParseFloat(value, 64)\n    if num >= 0 {\n        return int(num + 0.5)\n    } else {\n        return int(num - 0.5)\n    }\n}",
    "HumanEval/100": "func MakeAPile(n int) []int {\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = n + 2 * i\n    }\n    return result\n}",
    "HumanEval/101": "func WordsString(s string) []string {\n    words := regexp.MustCompile(`[, ]`).Split(s, -1)\n    result := make([]string, 0)\n    for _, w := range words {\n        if len(w) > 0 {\n            result = append(result, w)\n        }\n    }\n    return result\n}",
    "HumanEval/102": "func ChooseNum(x int, y int) int {\n    if (x > y) {\n        return -1;\n    }\n    if (y % 2 == 0) {\n        return y;\n    }\n    if (y != x) {\n        return y - 1;\n    }\n    return -1;\n}",
    "HumanEval/103": "func RoundedAvg(n int, m int) *string {\n    if n > m {\n        return nil\n    }\n    rAvg := int(float64((n + m)) / 2.0 + 0.5)\n    result := strconv.FormatInt(int64(rAvg), 2)\n    return &result\n}",
    "HumanEval/104": "func AllOddDigits(s string) bool {\n    for _, digit := range s {\n        if digit % 2 == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc UniqueDigits(x []int) []int {\n    var result []int\n    for _, num := range x {\n        if AllOddDigits(strconv.Itoa(num)) {\n            result = append(result, num)\n        }\n    }\n    sort.Ints(result)\n    return result\n}",
    "HumanEval/105": "func ByLength(arr []int) []string {\n    digitNames := []string{\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"}\n    var sortedArr []int\n    for _, x := range arr {\n        if 1 <= x && x <= 9 {\n            sortedArr = append(sortedArr, x)\n        }\n    }\n    sort.Slice(sortedArr, func(i, j int) bool {\n        return sortedArr[i] > sortedArr[j]\n    })\n    var result []string\n    for _, x := range sortedArr {\n        result = append(result, digitNames[x - 1])\n    }\n    return result\n}",
    "HumanEval/106": "func F(n int) []int {\n    nums := make([]int, n)\n    for i := 0; i < n; i++ {\n        nums[i] = i + 1\n    }\n    var result []int\n    for _, i := range nums {\n        if i % 2 != 0 {\n            sum := 0\n            for _, j := range nums[:i] {\n                sum += j\n            }\n            result = append(result, sum)\n        } else {\n            product := 1\n            for _, j := range nums[:i] {\n                product *= j\n            }\n            result = append(result, product)\n        }\n    }\n    return result\n}",
    "HumanEval/107": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc EvenOddPalindrome(n int) []int {\n    cnt := []int{0, 0}\n    for i := 1; i <= n; i++ {\n        if IsPalindrome(strconv.Itoa(i)) {\n            cnt[i % 2] += 1\n        }\n    }\n    return cnt\n}",
    "HumanEval/108": "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        acc := 0\n        for _, d := range nStr {\n            dInt, _ := strconv.Atoi(string(d))\n            acc += dInt\n        }\n        return acc\n    } else {\n        neg, _ := strconv.Atoi(nStr[0:2])\n        return neg * 2 + DigitsSum(int(math.Abs(float64(n))))\n    }\n}\nfunc CountNums(arr []int) int {\n    cnt := 0\n    for _, n := range arr {\n        if DigitsSum(n) > 0 {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
    "HumanEval/109": "func MoveOneBall(arr []int) bool {\n    if len(arr) == 0 {\n        return true\n    }\n    sortedArr := make([]int, len(arr))\n    copy(sortedArr, arr)\n    sort.Ints(sortedArr)\n    for i := 0; i < len(arr); i++ {\n        if reflect.DeepEqual(arr[i:], sortedArr[:len(arr) - i]) && reflect.DeepEqual(arr[:i], sortedArr[len(arr) - i:]) {\n            return true\n        }\n    }\n    return false\n}",
    "HumanEval/110": "func CanExchange(lst1 []int, lst2 []int) string {\n    oddCnt := 0\n    evenCnt := 0\n    for _, num := range lst1 {\n        if num % 2 != 0 {\n            oddCnt += 1\n        }\n    }\n    for _, num := range lst2 {\n        if num % 2 == 0 {\n            evenCnt += 1\n        }\n    }\n    if evenCnt >= oddCnt {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}",
    "HumanEval/111": "func Histogram(test string) map[string]int {\n    freq := make(map[string]int)\n    words := strings.Split(test, \" \")\n    for _, w := range words {\n        if len(w) > 0 {\n            freq[w] += 1\n        }\n    }\n    result := make(map[string]int)\n    if len(freq) > 0 {\n        maxFreq := 0\n        for _, v := range freq {\n            if v > maxFreq {\n                maxFreq = v\n            }\n        }   \n        for k, v := range freq {\n            if v == maxFreq {\n                result[k] = v\n            }\n        }\n    }\n    return result\n}",
    "HumanEval/112": "func IsPalindrome(s string) bool {\n    runes := []rune(s)\n    for i := 0; i < len(runes)/2; i++ {\n        if runes[i] != runes[len(runes)-1-i] {\n            return false\n        }\n    }\n    return true\n}\nfunc ReverseDelete(s string, c string) []string {\n    var s1 strings.Builder\n    for _, ch := range s {\n        if !strings.Contains(c, string(ch)) {\n            s1.WriteRune(ch)\n        }\n    }\n    check := \"no\"\n    if IsPalindrome(s1.String()) {\n        check = \"yes\"\n    }\n    return []string{s1.String(), check}\n}",
    "HumanEval/113": "func OddCount(lst []string) []string {\n    var result []string\n    for _, num := range lst {\n        n := 0\n        for _, d := range num {\n            if int(d) % 2 == 1 {\n                n++\n            }\n        }\n        rs := \"the number of odd elements in the string i of the input.\"\n        result = append(result, strings.ReplaceAll(rs, \"i\", strconv.Itoa(n)))\n    }\n    return result\n}",
    "HumanEval/114": "func MinSubArraySum(nums []int) int {\n    minSum := 0\n    curSum := 0\n    for _, n := range nums {\n        if curSum + n > 0 {\n            curSum = 0\n        } else {\n            curSum += n\n        }\n        if curSum < minSum {\n            minSum = curSum\n        }\n    }\n    if minSum == 0 {\n        minSum = math.MaxInt\n        for _, n := range nums {\n            if n < minSum {\n                minSum = n\n            }\n        }\n    }\n    return minSum\n}",
    "HumanEval/115": "func MaxFill(grid [][]int, capacity int) int {\n    result := 0\n    for _, arr := range grid {\n        sum := 0\n        for _, n := range arr {\n            sum += n\n        }\n        result += int(math.Ceil(float64(sum) / float64(capacity)))\n    }\n    return result\n}",
    "HumanEval/116": "func CountOnes(num int) int {\n    return strings.Count(strconv.FormatInt(int64(num), 2), \"1\")\n}\nfunc SortArray(arr []int) []int {\n    result := make([]int, len(arr))\n    copy(result, arr)\n    sort.Slice(result, func(i, j int) bool {\n        if CountOnes(result[i]) == CountOnes(result[j]) {\n            return result[i] < result[j]\n        }\n        return CountOnes(result[i]) < CountOnes(result[j])\n    })\n    return result\n}",
    "HumanEval/117": "func SelectWords(s string, n int) []string {\n    consonants := \"bcdfghjklmnpqrstvwxyz\"\n    strs := strings.Split(s, \" \")\n    words := []string{}\n    for _, w := range strs {\n        if len(w) > 0 {\n            words = append(words, w)\n        }\n    }\n    result := []string{}\n    for _, w := range words {\n        count := 0\n        for _, c := range w {\n            if strings.ContainsRune(consonants, unicode.ToLower(c)) {\n                count++\n            }\n        }\n        if count == n {\n            result = append(result, w)\n        }\n    }\n    return result\n}",
    "HumanEval/118": "func GetClosestVowel(word string) string {\n    vowels := \"aeiouAEIOU\"\n    for i := len(word) - 2; i > 0; i-- {\n        if strings.ContainsRune(vowels, rune(word[i])) && !strings.ContainsRune(vowels, rune(word[i - 1])) && !strings.ContainsRune(vowels, rune(word[i + 1])) {\n            return string(word[i])\n        }\n    }\n    return \"\"\n}",
    "HumanEval/119": "func Check(s string) bool {\n    depth := 0\n    for _, ch := range s {\n        if ch == '(' {\n            depth++\n        } else {\n            depth--\n        }\n        if depth < 0 {\n            return false\n        }\n    }\n    return depth == 0\n}\nfunc MatchParens(lst []string) string {\n    s1 := lst[0] + lst[1]\n    s2 := lst[1] + lst[0]\n    if Check(s1) || Check(s2) {\n        return \"Yes\"\n    }\n    return \"No\"\n}",
    "HumanEval/120": "func Maximum(arr []int, k int) []int {\n    if k == 0 {\n        return []int{}\n    }\n    result := make([]int, len(arr))\n    copy(result, arr)\n    sort.Ints(result)\n    return result[len(arr)-k:]\n}",
    "HumanEval/121": "func Solution(lst []int) int {\n    result := 0\n    for i, x := range lst {\n        if i % 2 == 0 && x % 2 != 0 {\n            result += x\n        }\n    }\n    return result\n}",
    "HumanEval/122": "func AddElements(arr []int, k int) int {\n    result := 0\n    for i := 0; i < k; i++ {\n        if len(strconv.Itoa(arr[i])) <= 2 {\n            result += arr[i]\n        }\n    }\n    return result\n}",
    "HumanEval/123": "func GetOddCollatz(n int) []int {\n    collatz := []int{1}\n    for n != 1 {\n        if n % 2 != 0 {\n            collatz = append(collatz, n)\n            n = 3 * n + 1\n        } else {\n            n = n / 2\n        }\n    }\n    sort.Ints(collatz)\n    return collatz\n}",
    "HumanEval/124": "func ValidDate(date string) bool {\n    if len(date) != 10 || date[2] != '-' || date[5] != '-' {\n        return false\n    }\n    m, _ := strconv.Atoi(date[:2])\n    d, _ := strconv.Atoi(date[3:5])\n    for _, i := range []int{1, 3, 5, 7, 8, 10, 12} {\n        if i == m && d >= 1 && d <= 31 {\n            return true\n        }\n    }\n    for _, i := range []int{4, 6, 9, 11} {\n        if i == m && d >= 1 && d <= 30 {\n            return true\n        }\n    }\n    if m == 2 && d >= 1 && d <= 29 {\n        return true\n    }\n    return false\n}",
    "HumanEval/125": "func SplitWords(txt string) []string {\n    if strings.Contains(txt, \" \") {\n        return strings.Split(txt, \" \")\n    } else if strings.Contains(txt, \",\") {\n        return strings.Split(txt, \",\")\n    } else {\n        cnt := 0\n        for _, c := range txt {\n            if unicode.IsLower(c) && int(c) % 2 == 0 {\n                cnt++\n            }\n        }\n        return []string{strconv.Itoa(cnt)}\n    }\n}",
    "HumanEval/126": "func IsSorted(lst []int) bool {\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i - 1] {\n            return false\n        }\n    }\n    freq := make(map[int]int)\n    for _, i := range lst {\n        freq[i] += 1\n    }\n    maxFreq := 0\n    for _, v := range freq {\n        if v > maxFreq {\n            maxFreq = v\n        }\n    }\n    return len(lst) == 0 || maxFreq <= 2\n}",
    "HumanEval/127": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc Intersection(interval1 []int, interval2 []int) string {\n    l := max(interval1[0], interval2[0])\n    r := min(interval1[1], interval2[1])\n    length := r - l\n    if length > 0 && IsPrime(length) {\n        return \"YES\"\n    }\n    return \"NO\"\n}",
    "HumanEval/128": "func ProdSigns(arr []int) *int {\n    if len(arr) == 0 {\n        return nil\n    }\n    result := 0\n    for _, n := range arr {\n        if n == 0 {\n            return &result\n        }\n    }\n    sign := 1\n    for _, n := range arr {\n        if n < 0 {\n            sign *= -1\n        }\n        result += int(math.Abs(float64(n)))\n    }\n    result = sign * result\n    return &result\n}",
    "HumanEval/129": "func MinPath(grid [][]int, k int) []int {\n    n := len(grid)\n    minVal := n * n + 1\n    for i := 0; i < n; i++ {\n        for j := 0; j < n; j++ {\n            if grid[i][j] == 1 {\n                temp := []int{}\n                if i != 0 {\n                    temp = append(temp, grid[i - 1][j])\n                }\n                if j != 0 {\n                    temp = append(temp, grid[i][j - 1])\n                }\n                if i != n - 1 {\n                    temp = append(temp, grid[i + 1][j])\n                }\n                if j != n - 1 {\n                    temp = append(temp, grid[i][j + 1])\n                }\n                minVal = temp[0]\n                for _, v := range temp {\n                    if v < minVal {\n                        minVal = v\n                    }\n                }\n            }\n        }\n    }\n    result := []int{}\n    for i := 0; i < k; i++ {\n        if i % 2 == 0 {\n            result = append(result, 1)\n        } else {\n            result = append(result, minVal)\n        }\n    }\n    return result\n}",
    "HumanEval/130": "func Tri(n int) []int {\n    if n == 0 {\n        return []int{1}\n    }\n    seq := []int{1, 3}\n    for i := 2; i <= n; i++ {\n        if i % 2 == 0 {\n            seq = append(seq, i / 2 + 1)\n        } else {\n            seq = append(seq, seq[i - 1] + seq[i - 2] + (i + 3) / 2)\n        }\n    }\n    return seq\n}",
    "HumanEval/131": "func Digits(n int) int {\n    odds := []int{}\n    for _, d := range strconv.Itoa(n) {\n        if int(d - '0') % 2 == 1 {\n            odds = append(odds, int(d - '0'))\n        }\n    }\n    if len(odds) == 0 {\n        return 0\n    }\n    result := 1\n    for _, d := range odds {\n        result *= d\n    }\n    return result\n}",
    "HumanEval/132": "func IsNested(s string) bool {\n    openIdx := []int{}\n    closeIdx := []int{}\n    for i, ch := range s {\n        switch ch {\n            case '[':\n                openIdx = append(openIdx, i)\n            case ']':\n                closeIdx = append([]int{i}, closeIdx...)\n        }\n    }\n    cnt := 0\n    i := 0\n    l := len(closeIdx)\n    for _, idx := range openIdx {\n        if i < l && idx < closeIdx[i] {\n            cnt++\n            i++\n        }\n    }\n    return cnt >= 2\n}",
    "HumanEval/133": "func SumSquares(lst []float64) int {\n    result := 0\n    for _, n := range lst {\n        result += int(math.Pow(math.Ceil(n), 2))\n    }\n    return result\n}",
    "HumanEval/134": "func CheckIfLastCharIsALetter(txt string) bool {\n    if len(txt) == 0 {\n        return false\n    }\n    last := txt[strings.LastIndex(txt, \" \")+1:]\n    return len(last) == 1 && unicode.IsLetter(rune(last[0]))\n}",
    "HumanEval/135": "func CanArrange(arr []int) int {\n    if len(arr) <= 1 {\n        return -1\n    }\n    idx := []int{}\n    for i := 1; i < len(arr); i++ {\n        if arr[i] < arr[i - 1] {\n            idx = append(idx, i)\n        }\n    }\n    if len(idx) == 0 {\n        return -1\n    }\n    maxIdx := idx[0]\n    for _, i := range idx {\n        if i > maxIdx {\n            maxIdx = i\n        }\n    }\n    return maxIdx\n}",
    "HumanEval/136": "func LargestSmallestIntegers(lst []int) []*int {\n    var maxNeg *int = nil\n    var minPos *int = nil\n    for _, n := range lst {\n        if n < 0 {\n            if maxNeg == nil {\n                maxNeg = new(int)\n                *maxNeg = n\n            } else if n > *maxNeg {\n                *maxNeg = n\n            }   \n        }\n        if n > 0 {\n            if minPos == nil {\n                minPos = new(int)\n                *minPos = n\n            } else if n < *minPos {\n                *minPos = n\n            }\n        }\n    }\n    return []*int{maxNeg, minPos}\n}",
    "HumanEval/137": "func AnyToReal(o interface{}) float64 {\n    if oStr, ok := o.(string); ok {\n        oFloat, _ := strconv.ParseFloat(strings.ReplaceAll(oStr, \",\", \".\"), 64);\n        return oFloat\n    } else if oInt, ok := o.(int); ok {\n        return float64(oInt)\n    } else if oFloat, ok := o.(float64); ok {\n        return oFloat\n    }\n    panic(\"Type Error\")\n}\nfunc CompareOne(a interface{}, b interface{}) *float64 {\n    a1 := AnyToReal(a)\n    b1 := AnyToReal(b)\n    ptr := new(float64)\n    if a1 == b1 {\n        return nil\n    } else if a1 > b1 {        \n        *ptr = a1\n        return ptr\n    } else {\n        *ptr = b1\n        return ptr\n    }\n}",
    "HumanEval/138": "func IsEqualToSumEven(n int) bool {\n    return n%2 == 0 && n >= 8\n}",
    "HumanEval/139": "func SpecialFactorial(n int) int {\n    fact := 1\n    result := 1\n    for i := 1; i <= n; i++ {\n        fact *= i\n        result *= fact\n    }\n    return result\n}",
    "HumanEval/140": "func FixSpaces(txt string) string {\n    return strings.ReplaceAll(regexp.MustCompile(`\\s{3,}`).ReplaceAllString(txt, \"-\"), \" \", \"_\")\n}",
    "HumanEval/141": "func FileNameCheck(fileName string) string {\n    suf := []string{\"txt\", \"exe\", \"dll\"}\n    lst := strings.Split(fileName, \".\")\n    if len(lst) != 2 || len(lst[0]) == 0 || !unicode.IsLetter(rune(lst[0][0])) {\n        return \"No\"\n    }\n    found := false\n    for _, s := range suf {\n        if s == lst[1] {\n            found = true\n            break\n        }\n    }\n    if !found {\n        return \"No\"\n    }\n    digitCnt := 0\n    for _, ch := range lst[0] {\n        if unicode.IsDigit(ch) {\n            digitCnt++\n        }\n    }\n    if digitCnt > 3 {\n        return \"No\"\n    }\n    return \"Yes\"\n}",
    "HumanEval/142": "func SumSquares(lst []int) int {\n    result := 0\n    for i := 0; i < len(lst); i++ {\n        if i % 3 == 0 {\n            result += int(math.Pow(float64(lst[i]), 2))\n        } else if i % 4 == 0 {\n            result += int(math.Pow(float64(lst[i]), 3))\n        } else {\n            result += lst[i]\n        }\n    }\n    return result\n}",
    "HumanEval/143": "func IsPrime(n int) bool {\n    if n < 2 {\n        return false\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return false\n        }\n    }\n    return true\n}\nfunc WordsInSentence(sentence string) string {\n    strs := strings.Split(sentence, \" \")\n    words := []string{}\n    for _, word := range strs {\n        if IsPrime(len(word)) {\n            words = append(words, word)\n        }\n    }\n    return strings.Join(words, \" \")\n}",
    "HumanEval/144": "func Simplify(x string, n string) bool {\n    xs := strings.Split(x, \"/\")\n    ns := strings.Split(n, \"/\")\n    num0, _ := strconv.Atoi(xs[0])\n    den0, _ := strconv.Atoi(xs[1])\n    num1, _ := strconv.Atoi(ns[0])\n    den1, _ := strconv.Atoi(ns[1])\n    return (num0 * num1) % (den0 * den1) == 0\n}",
    "HumanEval/145": "func DigitsSum(n int) int {\n    nStr := strconv.Itoa(n)\n    if n >= 0 {\n        acc := 0\n        for _, d := range nStr {\n            dInt, _ := strconv.Atoi(string(d))\n            acc += dInt\n        }\n        return acc\n    } else {\n        neg, _ := strconv.Atoi(nStr[0:2])\n        return neg * 2 + DigitsSum(int(math.Abs(float64(n))))\n    }\n}\nfunc OrderByPoints(nums []int) []int {\n    result := make([]int, len(nums))\n    copy(result, nums)\n    sort.SliceStable(result, func(i, j int) bool {\n        return DigitsSum(result[i]) < DigitsSum(result[j])\n    })\n    return result\n}",
    "HumanEval/146": "func SpecialFilter(nums []int) int {\n    odds := \"13579\"\n    cnt := 0\n    for _, n := range nums {\n        if n > 10 && n % 2 == 1 && strings.Contains(odds, string(strconv.Itoa(n)[0])) {\n            cnt += 1\n        }\n    }\n    return cnt\n}",
    "HumanEval/147": "func GetMaxTriples(n int) int {\n    c := [3]int{0, 0, 0}\n    for i := 1; i <= n; i++ {\n        a := i * i - i + 1\n        c[a % 3] += 1\n    }\n    return c[0] * c[1] * c[2] + (c[0] * (c[0] - 1) * (c[0] - 2) + c[1] * (c[1] - 1) * (c[1] - 2) + c[2] * (c[2] - 1) * (c[2] - 2)) / 6\n}",
    "HumanEval/148": "func Bf(planet1 string, planet2 string) []string {\n    names := []string{\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"}\n    l, r := -1, -1\n    for i, name := range names {\n        if name == planet1 {\n            l = i\n        }\n        if name == planet2 {\n            r = i\n        }\n    }\n    if l == -1 || r == -1 {\n        return []string{}\n    }\n    if l > r {\n        l, r = r, l\n    }\n    if l == r {\n        return []string{}\n    }\n    return names[l + 1 : r]\n}",
    "HumanEval/149": "func SortedListSum(lst []string) []string {\n    result := []string{}\n    for _, s := range lst {\n        if len(s) % 2 == 0 {\n            result = append(result, s)\n        }\n    }\n    sort.Slice(result, func(i, j int) bool {\n        if len(result[i]) == len(result[j]) {\n            return result[i] < result[j]\n        }\n        return len(result[i]) < len(result[j])\n    })\n    return result\n}",
    "HumanEval/150": "func XOrY(n int, x int, y int) int {\n    if n < 2 {\n        return y\n    }\n    for i := 2; i <= int(math.Floor(math.Sqrt(float64(n)))); i++ {\n        if n % i == 0 {\n            return y\n        }\n    }\n    return x\n}",
    "HumanEval/151": "func DoubleTheDifference(lst []float64) int {\n    acc := 0\n    for _, n := range lst {\n        if n >= 0 && int(n) % 2 == 1 {\n            acc += int(n * n)\n        }\n    }\n    return acc\n}",
    "HumanEval/152": "func Compare(game []int, guess []int) []int {\n    result := make([]int, len(game))\n    for x, i := range game {\n        result[x] = int(math.Abs(float64(i - guess[x])))\n    }\n    return result\n}",
    "HumanEval/153": "func StrongestExtension(className string, extensions []string) string {\n    maxS := math.MinInt\n    maxExt := \"\"\n    for _, ext := range extensions {\n        upper := 0\n        lower := 0\n        for _, c := range ext {\n            if unicode.IsUpper(c) {\n                upper += 1\n            } else if unicode.IsLower(c) {\n                lower += 1\n            }\n        }\n        s := upper - lower\n        if s > maxS {\n            maxS = s\n            maxExt = ext\n        }\n    }\n    return fmt.Sprintf(\"%s.%s\", className, maxExt)\n}",
    "HumanEval/154": "func CycpatternCheck(a string, b string) bool {\n    if len(a) < len(b) {\n        return false\n    }\n    for i := 0; i < len(b); i++ {\n        if strings.Contains(a, b[i:]+b[:i]) {\n            return true\n        }\n    }\n    return false\n}",
    "HumanEval/155": "func EvenOddCount(num int) []int {\n    ds := strconv.Itoa(int(math.Abs(float64(num))))\n    even := 0\n    for _, d := range ds {\n        if int(d) % 2 == 0 {\n            even++\n        }\n    }\n    return []int{even, len(ds) - even}\n}",
    "HumanEval/156": "func IntToMiniRoman(num int) string {\n    values := []int{1000, 900, 500, 400, 100, 90, 50, 40, 10, 9 ,5, 4, 1}\n    numerals := []string{\"m\", \"cm\", \"d\", \"cd\", \"c\", \"xc\", \"l\", \"xl\", \"x\", \"ix\", \"v\", \"iv\", \"i\"}\n    var res strings.Builder\n    for i := 0; i < len(values); i++ {\n        for num >= values[i] {\n            res.WriteString(numerals[i])\n            num -= values[i]\n        }\n    }\n    return res.String()\n}",
    "HumanEval/157": "func RightAngleTriangle(a, b, c int) bool {\n    s := []int{a, b, c}\n    sort.Ints(s)\n    return s[0] * s[0] + s[1] * s[1] == s[2] * s[2]\n}",
    "HumanEval/158": "func FindMax(words []string) string {\n    maxCnt := 0\n    maxW := \"\"\n    for _, w := range words {\n        cnt := 0\n        freq := make(map[rune]bool)\n        for _, c := range w {\n            if !freq[c] {\n                freq[c] = true\n                cnt++\n            }\n        }\n        if cnt > maxCnt {\n            maxCnt = cnt\n            maxW = w\n        } else if cnt == maxCnt {\n            maxW = min(maxW, w)\n        }\n    }\n    return maxW\n}",
    "HumanEval/159": "func Eat(num int, need int, remaining int) []int {\n    if need <= remaining {\n        return []int{num + need, remaining - need}\n    } else {\n        return []int{num + remaining, 0}\n    }\n}",
    "HumanEval/160": "func DoAlgebra(operators []string, operands []int) int {\n    ops := make([]string, len(operators))\n    nums := make([]int, len(operands))\n    copy(ops, operators)\n    copy(nums, operands)\n    i := len(ops) - 1\n    for i >= 0 {\n        if ops[i] == \"**\" {\n            nums[i] = int(math.Pow(float64(nums[i]), float64(nums[i + 1])))\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n        }\n        i -= 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"*\" {\n            nums[i] = nums[i] * nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        } else if ops[i] == \"//\" {\n            nums[i] = nums[i] / nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    i = 0\n    for i < len(ops) {\n        if ops[i] == \"+\" {\n            nums[i] = nums[i] + nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        } else if ops[i] == \"-\" {\n            nums[i] = nums[i] - nums[i + 1]\n            nums = append(nums[:i + 1], nums[i + 2:]...)\n            ops = append(ops[:i], ops[i + 1:]...)\n            i -= 1\n        }\n        i += 1\n    }\n    return nums[0]\n}",
    "HumanEval/161": "func Solve(s string) string {\n    flag := false\n    for _, ch := range s {\n        if unicode.IsLetter(ch) {\n            flag = true\n            break\n        }\n    }\n    if !flag {\n        runes := []rune(s)\n        for i, j := 0, len(runes)-1; i < j; i, j = i+1, j-1 {\n            runes[i], runes[j] = runes[j], runes[i]\n        }\n        return string(runes)\n    }\n    var result strings.Builder\n    for _, ch := range s {\n        if !unicode.IsLetter(ch) {\n            result.WriteRune(ch)\n        } else if unicode.IsUpper(ch) {\n            result.WriteRune(unicode.ToLower(ch))\n        } else if unicode.IsLower(ch) {\n            result.WriteRune(unicode.ToUpper(ch))\n        }\n    }\n    return result.String()\n}",
    "HumanEval/162": "func StringToMd5(txt string) *string {\n    if txt == \"\" {\n        return nil\n    }\n    md5Hash := md5.New()\n    txtBytes := []byte(txt)\n    md5Hash.Write(txtBytes)\n    md5Encoded := hex.EncodeToString(md5Hash.Sum(nil))\n    return &md5Encoded\n}",
    "HumanEval/163": "func GenerateIntegers(a int, b int) []int {\n    lower := int(max(2.0, min(float64(a), float64(b))))\n    upper := int(min(8.0, max(float64(a), float64(b))))\n    numbers := []int{}\n    for i := lower; i <= upper; i++ {\n        if i % 2 == 0 {\n            numbers = append(numbers, i)\n        }\n    }\n    return numbers\n}"
}

# calculate average length of above

total = 0
for key in solutions:
    total += len(solutions[key])
average = total / len(solutions)

print(average)

