fun consecutivePrimeSum(limit: Int): Int {
    val sieve = BooleanArray(limit) { true }
    val primes = mutableListOf<Int>()
    for (i in 2 until limit) {
        if (sieve[i]) {
            primes.add(i)
            for (j in i * 2 until limit step i) {
                sieve[j] = false
            }
        }
    }
    var maxLength = 0
    var maxPrime = 0
    for (i in primes.indices) {
        for (j in i + maxLength until primes.size) {
            val s = primes.subList(i, j).sum()
            if (s >= limit) {
                break
            }
            if (sieve[s] && j - i > maxLength) {
                maxLength = j - i
                maxPrime = s
            }
        }
    }
    return maxPrime
}
