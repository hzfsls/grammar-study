fun isPrime(n: Int): Boolean {
    if (n < 2) {
        return false
    }
    if (n == 2) {
        return true
    }
    if (n % 2 == 0) {
        return false
    }
    for (i in 3..Math.sqrt(n.toDouble()).toInt() step 2) {
        if (n % i == 0) {
            return false
        }
    }
    return true
}

fun circularPrimes(n: Int): Int {
    var count = 0
    for (i in 2 until n) {
        if (isPrime(i)) {
            val rotations = mutableMapOf<Int, Unit>()
            val str = i.toString()
            for (j in 0 until str.length) {
                val x = str.substring(j) + str.substring(0, j)
                rotations[x.toInt()] = Unit
            }
            var flag = true
            for (x in rotations.keys) {
                if (!isPrime(x)) {
                    flag = false
                    break
                }
            }
            if (flag) {
                count++
            }
        }
    }
    return count
}
