func IsPrime(n int) bool {
    if n < 2 {
        return false
    }
    if n == 2 {
        return true
    }
    if n % 2 == 0 {
        return false
    }
    for i := 3; i <= int(math.Sqrt(float64(n))); i += 2 {
        if n % i == 0 {
            return false
        }
    }
    return true
}

func CircularPrimes(n int) int {
    count := 0
    for i := 2; i < n; i++ {
        if IsPrime(i) {
            rotations := map[int]bool{}
            for j := 0; j < len(strconv.Itoa(i)); j++ {
                rotations[int(strconv.Itoa(i)[j:] + strconv.Itoa(i)[:j])] = true
            }
            flag := true
            for x := range rotations {
                if!IsPrime(x) {
                    flag = false
                    break
                }
            }
            if flag {
                count++
            }
        }
    }
    return count
}
