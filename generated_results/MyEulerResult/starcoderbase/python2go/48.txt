func IsPrime(n int) bool {
    if n < 2 {
        return false
    }
    if n == 2 {
        return true
    }
    if n % 2 == 0 {
        return false
    }
    for i := 3; i < int(math.Sqrt(float64(n))) + 1; i += 2 {
        if n % i == 0 {
            return false
        }
    }
    return true
}

func GenPermutations(s string) []string {
    if len(s) <= 1 {
        return []string{s}
    }
    result := []string{}
    for _, perm := range GenPermutations(s[1:]) {
        for i := 0; i < len(s); i++ {
            result = append(result, perm[:i] + s[0:1] + perm[i:])
        }
    }
    return result
}

func PrimePermutations(n int) string {
    for i := n; i >= 999; i-- {
        if IsPrime(i) {
            permutations := GenPermutations(strconv.Itoa(i))
            candidates := map[int]bool{}
            for _, j := range permutations {
                candidate, _ := strconv.Atoi(j)
                if candidate > i && IsPrime(candidate) {
                    candidates[candidate] = true
                }
            }
            for m := range candidates {
                if m + (m - i) > i && candidates[m + (m - i)] {
                    return strconv.Itoa(i) + strconv.Itoa(m) + strconv.Itoa(m + (m - i))
                }
            }
        }
    }
    return ""
}
