const isPrime = (n) => {
    if (n < 2) {
        return false;
    }
    if (n === 2) {
        return true;
    }
    if (n % 2 === 0) {
        return false;
    }
    for (let i = 3; i <= Math.sqrt(n); i += 2) {
        if (n % i === 0) {
            return false;
        }
    }
    return true;
}

const circularPrimes = (n) => {
    let count = 0;
    for (let i = 2; i < n; i++) {
        if (isPrime(i)) {
            let rotations = new Set();
            for (let j = 0; j < String(i).length; j++) {
                rotations.add(parseInt(String(i).substring(j) + String(i).substring(0, j)));
            }
            let flag = true;
            for (let x of rotations) {
                if (!isPrime(x)) {
                    flag = false;
                    break;
                }
            }
            if (flag) {
                count += 1;
            }
        }
    }
    return count;
}
