fn consecutive_prime_sum(limit: i32) -> i32 {
    let mut sieve = vec![true; limit as usize];
    let mut primes = Vec::new();
    for i in 2..limit {
        if sieve[i as usize] {
            primes.push(i);
            for j in (i * 2)..limit {
                if j % i == 0 {
                    sieve[j as usize] = false;
                }
            }
        }
    }
    let mut max_length = 0;
    let mut max_prime = 0;
    for i in 0..primes.len() {
        for j in (i + max_length)..primes.len() {
            let s = primes[i..j].iter().sum();
            if s >= limit {
                break;
            }
            if sieve[s as usize] && j - i > max_length {
                max_length = j - i;
                max_prime = s;
            }
        }
    }
    max_prime
}
