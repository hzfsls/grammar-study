fn is_prime(n: i32) -> bool {
    if n < 2 {
        return false;
    }
    if n == 2 {
        return true;
    }
    if n % 2 == 0 {
        return false;
    }
    for i in 3..(n as f64).sqrt() as i32 + 1 {
        if n % i == 0 {
            return false;
        }
    }
    true
}

fn gen_permutations(s: &String) -> Vec<String> {
    if s.len() <= 1 {
        return vec![s.clone()];
    }
    let mut result = Vec::new();
    for perm in gen_permutations(&s[1..]) {
        for i in 0..s.len() {
            result.push(perm[..i].to_string() + &s[0..1] + &perm[i..]);
        }
    }
    result
}

fn prime_permutations(n: i32) -> String {
    for i in n..1000 {
        if is_prime(i) {
            for perm in gen_permutations(&i.to_string()) {
                let candidate = perm.parse::<i32>().unwrap();
                if candidate > i && is_prime(candidate) {
                    if let Some(m) = candidates.get(&(candidate - i)) {
                        if candidates.contains_key(&(m + (m - i))) {
                            return i.to_string() + &candidate.to_string() + &(m + (m - i)).to_string();
                        }
                    }
                }
            }
        }
    }
    "".to_string()
}

fn main() {
    let mut candidates = HashMap::new();
    for i in 1000..10000 {
        if is_prime(i) {
            for perm in gen_permutations(&i.to_string()) {
                let candidate = perm.parse::<i32>().unwrap();
                if candidate > i && is_prime(candidate) {
                    candidates.insert(candidate - i, candidate);
                }
            }
        }
    }
    println!("{}", prime_permutations(9999));
}
