def isPrime(n: Int): Boolean = {
  if (n < 2) {
    false
  } else if (n == 2) {
    true
  } else if (n % 2 == 0) {
    false
  } else {
    var i = 3
    while (i <= math.sqrt(n).toInt) {
      if (n % i == 0) {
        return false
      }
      i += 2
    }
    true
  }
}

def circularPrimes(n: Int): Int = {
  var count = 0
  for (i <- 2 until n) {
    if (isPrime(i)) {
      val rotations = scala.collection.mutable.Map[Int, Unit]()
      val str = i.toString
      for (j <- 0 until str.length) {
        val x = str.substring(j) + str.substring(0, j)
        rotations(x.toInt) = ()
      }
      var flag = true
      for (x <- rotations.keys) {
        if (!isPrime(x)) {
          flag = false
          break
        }
      }
      if (flag) {
        count += 1
      }
    }
  }
  count
}
