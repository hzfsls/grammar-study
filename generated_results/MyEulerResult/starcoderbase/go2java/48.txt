class Global {
    public static boolean isPrime(int n) {
        if (n < 2) {
            return false;
        }
        if (n == 2) {
            return true;
        }
        if (n % 2 == 0) {
            return false;
        }
        for (int i = 3; i <= (int) Math.sqrt(n); i += 2) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static List<String> genPermutations(String s) {
        if (s.length() <= 1) {
            return Arrays.asList(s);
        }
        List<String> result = new ArrayList<>();
        for (String perm : genPermutations(s.substring(1))) {
            for (int i = 0; i < s.length(); i++) {
                result.add(perm.substring(0, i) + s.charAt(0) + perm.substring(i));
            }
        }
        return result;
    }

    public static String primePermutations(int n) {
        for (int i = n; i > 999; i--) {
            if (isPrime(i)) {
                List<String> permutations = genPermutations(Integer.toString(i));
                Map<Integer, Boolean> candidates = new HashMap<>();
                for (String j : permutations) {
                    int candidate = Integer.parseInt(j);
                    if (candidate > i && isPrime(candidate)) {
                        candidates.put(candidate, true);
                    }
                }
                for (int m : candidates.keySet()) {
                    if (candidates.get(m + (m - i))) {
                        return Integer.toString(i) + Integer.toString(m) + Integer.toString(m + (m - i));
                    }
                }
            }
        }
        return "";
    }
}
