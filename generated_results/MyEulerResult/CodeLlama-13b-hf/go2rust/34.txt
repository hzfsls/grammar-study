fn is_prime(n: i32) -> bool {
    if n < 2 {
        return false;
    }
    if n == 2 {
        return true;
    }
    if n % 2 == 0 {
        return false;
    }
    for i in 3..=((n as f64).sqrt() as i32) {
        if n % i == 0 {
            return false;
        }
    }
    true
}

fn circular_primes(n: i32) -> i32 {
    let mut count = 0;
    for i in 2..n {
        if is_prime(i) {
            let mut rotations = std::collections::HashSet::new();
            let str = i.to_string();
            for j in 0..str.len() {
                let x = str[j..].parse::<i32>().unwrap() + str[..j].parse::<i32>().unwrap();
                rotations.insert(x);
            }
            let mut flag = true;
            for x in rotations {
                if !is_prime(x) {
                    flag = false;
                    break;
                }
            }
            if flag {
                count += 1;
            }
        }
    }
    count
}
