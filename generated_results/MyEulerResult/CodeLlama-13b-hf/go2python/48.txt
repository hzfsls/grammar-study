def is_prime(n: int) -> bool:
    if n < 2:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        if n % i == 0:
            return False
    return True

def gen_permutations(s: str) -> list[str]:
    if len(s) <= 1:
        return [s]
    result = []
    for perm in gen_permutations(s[1:]):
        for i in range(len(s)):
            result.append(perm[:i] + s[0] + perm[i:])
    return result

def prime_permutations(n: int) -> str:
    for i in range(n, 999, -1):
        if is_prime(i):
            permutations = gen_permutations(str(i))
            candidates = {}
            for j in permutations:
                candidate = int(j)
                if candidate > i and is_prime(candidate):
                    candidates[candidate] = True
            for m in candidates:
                if candidates[m + (m - i)]:
                    return str(i) + str(m) + str(m + (m - i))
    return ""
