def gen_permutations(s: str) -> list[str]:
    if len(s) <= 1:
        return [s]
    result = []
    for perm in gen_permutations(s[1:]):
        for i in range(len(s)):
            result.append(perm[:i] + s[0] + perm[i:])
    return result

def sub_string_divisibility(n: int) -> int:
    result = 0
    primes = [2, 3, 5, 7, 11, 13, 17]
    s = ""
    for i in range(n + 1):
        s += str(i)
    for i in gen_permutations(s):
        flag = True
        for j in range(1, n - 1):
            if int(i[j:j + 3]) % primes[j - 1] != 0:
                flag = False
                break
        if flag:
            s0 = int(i)
            result += s0
    return result
