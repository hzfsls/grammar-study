bool isPrime(int n) {
    if (n < 2) {
        return false;
    }
    if (n == 2) {
        return true;
    }
    if (n % 2 == 0) {
        return false;
    }
    for (int i = 3; i <= sqrt(n); i += 2) {
        if (n % i == 0) {
            return false;
        }
    }
    return true;
}

vector<string> genPermutations(const string& s) {
    if (s.size() <= 1) {
        return vector<string>{s};
    }
    vector<string> result;
    for (const string& perm : genPermutations(s.substr(1))) {
        for (int i = 0; i < s.size(); i++) {
            result.push_back(perm.substr(0, i) + s[0] + perm.substr(i));
        }
    }
    return result;
}

string primePermutations(int n) {
    for (int i = n; i > 999; i--) {
        if (isPrime(i)) {
            vector<string> permutations = genPermutations(to_string(i));
            unordered_map<int, bool> candidates;
            for (const string& j : permutations) {
                int candidate = stoi(j);
                if (candidate > i && isPrime(candidate)) {
                    candidates[candidate] = true;
                }
            }
            for (int m : candidates) {
                if (candidates[m + (m - i)]) {
                    return to_string(i) + to_string(m) + to_string(m + (m - i));
                }
            }
        }
    }
    return "";
}
