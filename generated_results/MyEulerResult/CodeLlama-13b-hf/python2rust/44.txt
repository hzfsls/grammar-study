fn triangular_pentagonal_and_hexagonal(n: i32) -> i32 {
    let mut ps = HashSet::new();
    let mut i = 1;
    let mut c = 0.5 * i * (3 * i - 1);
    while c < n {
        i += 1;
        ps.insert(c);
        c = 0.5 * i * (3 * i - 1);
    }
    let mut i = 1;
    let mut c = i * (2 * i - 1);
    let mut result = -1;
    while c < n {
        i += 1;
        if ps.contains(&c) {
            result = c;
        }
        c = i * (2 * i - 1);
    }
    result
}
